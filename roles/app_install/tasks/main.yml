---
- name: clone rails app from git
  git: repo=git@github.com:ryanmcgary/skelly_rails.git dest={{appdir}}
      accept_hostkey=True
  sudo: no
  register: git
  notify:
    - ensure app permissions
  tags:
    - deploy


- include: rbenv.yml


- name: GEM install bundler
  shell: bash -lc "cd {{appdir}} && rbenv exec gem install --no-ri --no-rdoc bundle"

- name: GEM install project gems
  shell: bash -lc "cd {{appdir}} && rbenv exec bundle install" #"
  notify:
    - restart app
    - restart nginx
    - ensure app permissions
    - restart sidekiq    
  tags:
    - deploy

- name: check if database exists
  shell: bash -lc "cd {{appdir}} && rake db:version" #"
  ignore_errors: True
  register: rake_db_version_result
  tags:
    - deploy

- name: create database
  shell: bash -lc "cd {{appdir}} && rake db:create:all"
  when: rake_db_version_result|failed
  tags:
    - deploy

- name: check if migration added
  shell: bash -lc "cd {{appdir}} && rake db:abort_if_pending_migrations RAILS_ENV='production'" #"
  ignore_errors: True
  register: migration_change_result
  tags:
    - deploy

- name: apply database migrations
  shell: bash -lc "cd {{appdir}} && rake db:migrate RAILS_ENV='production'" #"
  when: migration_change_result|failed
  notify:
    - restart app
    - restart nginx
    - ensure app permissions
    - restart sidekiq    
  tags:
    - deploy

# setup unicorn as a service
- name: write unicorn.sh template as executable
  action: template src=../templates/unicorn.sh.j2 dest={{appdir}}/config/unicorn.sh mode=0777
  tags:
  - unicorn
#
- name: symlink unicorn.sh as service
  file: src={{appdir}}/config/unicorn.sh dest=/etc/init.d/unicorn_{{appname}} owner={{user}} group={{group}} state=link
  tags:
  - unicorn

# REGISTER SERVICES FOR STARTUP


- name: app service on boot
  service: name=unicorn_{{appname}} state=started enabled=yes
  sudo: yes


# RAILS_ENV=production bundle exec rake assets:precompile

# shell: bash -lc "cd {{appdir}} && rbenv exec bundle exec unicorn_rails -c config/unicorn.rb -D"


# Clean up tags & RUN SERVER FROM SCRATCH!

# horizontal scaling support
  # setup tunnel options for DB,ELASTICSEARCH https://www.digitalocean.com/community/tutorials/how-to-secure-postgresql-on-an-ubuntu-vps
  # ssh dave@server.domain.com -L 10293:127.0.0.1:3306
  # create an automated way of each server to have a inter network public/private key
  # make nginx conf dynamic
  # make
