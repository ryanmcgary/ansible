Edit hosts to include your server ip address
Set which server types each server will be assigned to

run initial server setup which sets up deployer account and copies public keys
ansible-playbook -l SERVER_NAME config.yml --tags "common" -e "ansible_ssh_user=root" --ask-pass

run playbook with all tag
ansible-playbook config.yml --tags "common,rbenv,[pg,sqlite],[nginx,nginx_load_balance_only],rbenv,node,redis,elasticsearch,app_install,sidekiq"

edit services lists in app_deploy > handlers & tasks > main.yml to match your config
ansible-playbook deploy.yml





<!-- Run adhoc remote commands -->
Now to run the command on all servers in a group, in this case, atlanta, in 10 parallel forks:
$ ansible atlanta -a "/sbin/reboot" -f 10
/usr/bin/ansible will default to running from your user account. If you do not like this behavior, pass in “-u username”. If you want to run commands as a different user, it looks like this:

$ ansible atlanta -a "/usr/bin/foo" -u username
Often you’ll not want to just do things from your user account. If you want to run commands through sudo:

$ ansible atlanta -a "/usr/bin/foo" -u username --sudo [--ask-sudo-pass]
Use --ask-sudo-pass (-K) if you are not using passwordless sudo. This will interactively prompt you for the password to use. Use of passwordless sudo makes things easier to automate, but it’s not required.

It is also possible to sudo to a user other than root using --sudo-user (-U):

$ ansible atlanta -a "/usr/bin/foo" -u username -U otheruser [--ask-sudo-pass]

To run shell commands
$ ansible raleigh -m shell -a 'echo $TERM'

